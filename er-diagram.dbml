// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table alerts {
  id integer [primary key]
  user_id integer [not null]
  type enum('LOST', 'FOUND') [not null]
  status enum('ACTIVE', 'RESOLVED') [not null]
  chip_number varchar(50) [note: "Chip number of the pet"]
  sex enum('MALE', 'FEMALE', 'UNKNOWN')
  created_at timestamp
  date timestamp [not null]
  description text
  breed varchar(100)
  cp varchar(10) [not null, note: "zip code where last seen"]
  country_id integer [not null]

  indexes {
    user_id
    country_id
    date
  }
}

Table photos {
  id integer [primary key]
  alert_id integer [not null]
  url varchar(255) [unique]

  indexes {
    alert_id
  }
}

Table users {
  id integer [primary key]
  username varchar(50) [not null]
  email varchar(100) [not null unique]
  subscription_email varchar(100) [not null]
  phone_number varchar(20)
  role enum('ADMIN', 'USER') [not null]
  created_at timestamp
}

Table subscriptions {
  id integer [primary key]
  user_id integer [not null]
  cp varchar(10) [not null]
  country_id integer [not null]
  alert_type enum('LOST', 'FOUND') [not null]
  type enum('EMAIL', 'SMS') [not null]

  indexes {
    user_id
    country_id
  }
}

Table notifications {
  id integer [primary key]
  user_id integer [not null]
  alert_id integer [not null]
  created_at timestamp
  type enum('EMAIL', 'SMS') [not null]

  indexes {
    user_id
    alert_id
  }
}

Table email_notifications {
  notification_id integer [primary key]
  status enum('PENDING', 'SENT', 'FAILED') [not null]
  to varchar(254) [not null]
  subject varchar(100) [not null]
  body text [not null]
}

Table sms_notifications {
  notification_id integer [primary key]
  status enum('PENDING', 'SENT', 'FAILED') [not null]
  phone_number varchar(20) [not null]
  text text [not null]
}

Table countries {
  id integer [primary key]
  name varchar(100) [unique, not null]
}

Ref user_alerts: alerts.user_id > users.id // many-to-one
Ref alert_photos: photos.alert_id > alerts.id // many-to-one
Ref user_subscriptions: subscriptions.user_id > users.id
Ref user_notifications: notifications.user_id > users.id
Ref email_notifications: email_notifications.notification_id - notifications.id
Ref sms_notifications: sms_notifications.notification_id - notifications.id
Ref alert_countries: alerts.country_id > countries.id
Ref subscription_countries: subscriptions.country_id > countries.id