openapi: 3.0.0
info:
  title: PetSignal API
  description: API for managing pet alerts and notifications
  version: 1.0.0

tags:
  - name: Alerts
    description: Operations about alerts
  - name: Photos
    description: Operations about alert photos
  - name: Users
    description: Operations about users
  - name: Subscriptions
    description: Operations about subscriptions
  - name: Notifications
    description: Operations about notifications
  - name: Countries
    description: Operations about countries

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

security:
  - bearerAuth: []

paths:
  /alerts:
    get:
      operationId: listAlerts
      tags:
        - Alerts
      summary: List all alerts
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [LOST, FOUND]
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, RESOLVED]
        - name: countryId
          in: query
          schema:
            type: integer
        - name: cp
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
    post:
      operationId: createAlert
      tags:
        - Alerts
      summary: Create a new alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
      responses:
        '201':
          description: Alert created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAlertResponse'
  /alerts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getAlertById
      tags:
        - Alerts
      summary: Get an alert by ID
      responses:
        '200':
          description: Alert found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
    put:
      operationId: updateAlert
      tags:
        - Alerts
      summary: Update an alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
      responses:
        '200':
          description: Alert updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
    delete:
      operationId: deleteAlert
      tags:
        - Alerts
      summary: Delete an alert
      responses:
        '204':
          description: Alert deleted
  /alerts/{alertId}/photos:
    parameters:
      - name: alertId
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: listAlertPhotos
      tags:
        - Photos
      summary: List photos for an alert
      responses:
        '200':
          description: List of photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
    post:
      operationId: addPhotoToAlert
      tags:
        - Photos
      summary: Add a photo to an alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
      responses:
        '201':
          description: Photo added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'

  /photos/s3:
    get:
      operationId: getPhotoFromS3
      tags:
        - Photos
      summary: retrieve a photo from s3
      parameters:
        - name: objectKey
          in: path
          required: true
          schema:
            type: string
        - name: presignedUrl
          in: query
          required: true
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: Photo correctly retrieve
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
    put:
      operationId: uploadToS3
      tags:
        - Photos
      summary: Upload photo to s3
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                presignedUrl:
                  type: string
                  format: uri
                objectKey:
                  type: string
              required:
                - file
                - presignedUrl
                - objectKey
      responses:
        '201':
          description: Upload successful
  /users:
    get:
      operationId: listUsers
      tags:
        - Users
      summary: List all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: createUser
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getUserById
      tags:
        - Users
      summary: Get a user by ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateUser
      tags:
        - Users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Delete a user
      responses:
        '204':
          description: User deleted

  /subscriptions:
    get:
      operationId: listSubscriptions
      tags:
        - Subscriptions
      summary: List all subscriptions
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
        - name: countryId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
    post:
      operationId: createSubscription
      tags:
        - Subscriptions
      summary: Create a new subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
  /subscriptions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getSubscriptionById
      tags:
        - Subscriptions
      summary: Get a subscription by ID
      responses:
        '200':
          description: Subscription found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
    put:
      operationId: updateSubscription
      tags:
        - Subscriptions
      summary: Update a subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '200':
          description: Subscription updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
    delete:
      operationId: deleteSubscription
      tags:
        - Subscriptions
      summary: Delete a subscription
      responses:
        '204':
          description: Subscription deleted

  /notifications:
    get:
      operationId: listNotifications
      tags:
        - Notifications
      summary: List all notifications
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
        - name: alertId
          in: query
          schema:
            type: integer
        - name: type
          in: query
          schema:
            type: string
            enum: [EMAIL, SMS]
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
    post:
      operationId: createNotification
      tags:
        - Notifications
      summary: Create a new notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '201':
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /notifications/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getNotificationById
      tags:
        - Notifications
      summary: Get a notification by ID
      responses:
        '200':
          description: Notification found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /email-notifications:
    get:
      operationId: listEmailNotifications
      tags:
        - Notifications
      summary: List all email notifications
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, SENT, FAILED]
      responses:
        '200':
          description: List of email notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailNotification'
    post:
      operationId: createEmailNotification
      tags:
        - Notifications
      summary: Create a new email notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailNotification'
      responses:
        '201':
          description: Email notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotification'

  /sms-notifications:
    get:
      operationId: listSmsNotifications
      tags:
        - Notifications
      summary: List all SMS notifications
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, SENT, FAILED]
      responses:
        '200':
          description: List of SMS notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmsNotification'
    post:
      operationId: createSmsNotification
      tags:
        - Notifications
      summary: Create a new SMS notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsNotification'
      responses:
        '201':
          description: SMS notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsNotification'

  /countries:
    get:
      operationId: listCountries
      tags:
        - Countries
      summary: List all countries
      responses:
        '200':
          description: List of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
  /countries/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getCountryById
      tags:
        - Countries
      summary: Get a country by ID
      responses:
        '200':
          description: Country found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Alert:
      type: object
      example:
        userId: 0
        type: SEEN
        chipNumber: "9999342343214322"
        status: ACTIVE
        sex: UNKNOWN
        date: "2025-04-17T16:40:27.914Z"
        title: "Found a cutie pie"
        description: "Seen at the beach, swimming"
        breed: "mixed"
        postalCode: "04001"
        countryCode: ES
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
        type:
          type: string
          enum: [LOST, SEEN]
        status:
          type: string
          enum: [ACTIVE, RESOLVED]
        chipNumber:
          type: string
          description: Chip number of the pet
        sex:
          type: string
          enum: [MALE, FEMALE, UNKNOWN]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        date:
          type: string
          format: date-time
        description:
          type: string
        breed:
          type: string
        postalCode:
          type: string
        countryCode:
          type: string
      required:
        - userId
        - type
        - date
        - postalCode
        - countryCode
        - title

    Photo:
      type: object
      properties:
        id:
          type: integer
        alertId:
          type: integer
        s3objectKey:
          type: string
      required:
        - alertId
        - url

    User:
      type: object
      example:
        id: 1
        username: "hannah_bannanah"
        email: "hannah@bannanah.com"
        subscriptionEmail: "bannanah@notifications.com"
        phoneNumber: "+34123456789"
        role: "USER"
        createdAt: "2024-03-15T14:30:00Z"
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        subscriptionEmail:
          type: string
          format: email
          maxLength: 100
        phoneNumber:
          type: string
          maxLength: 20
        role:
          type: string
          enum: [ADMIN, USER]
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - username
        - email
        - role

    Subscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
        cp:
          type: string
        countryId:
          type: integer
        alertType:
          type: string
          enum: [LOST, FOUND]
      required:
        - userId
        - cp
        - countryId
        - alertType

    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
        alertId:
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
        type:
          type: string
          enum: [EMAIL, SMS]
      required:
        - userId
        - alertId
        - type

    EmailNotification:
      type: object
      properties:
        notificationId:
          type: integer
        status:
          type: string
          enum: [PENDING, SENT, FAILED]
        to:
          type: string
          format: email
        subject:
          type: string
        body:
          type: string
      required:
        - notificationId
        - status
        - to
        - subject
        - body

    SmsNotification:
      type: object
      properties:
        notificationId:
          type: integer
        status:
          type: string
          enum: [PENDING, SENT, FAILED]
        phoneNumber:
          type: string
        text:
          type: string
      required:
        - notificationId
        - status
        - phoneNumber
        - text

    Country:
      type: object
      properties:
        country_code:
          type: string
          readOnly: true
        name:
          type: string
      required:
        - name

    CreateAlertRequest:
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            photoFilenames:
              type: array
              example: ["image.jpg"]
              items:
                type: string

    CreateAlertResponse:
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            photoUrls:
              type: array
              items:
                $ref: '#/components/schemas/PhotoUrl'

    PhotoUrl:
      type: object
      properties:
        s3ObjectKey:
          type: string
          example: "orignalFilename__abc123.jpg"
        presignedUrl:
          type: string
          format: uri
          example: "https:s3.region.aws.com/bucket/originalFilename__abc123.jpg"
      required:
        - s3ObjectKey
        - presignedUrl

    BadRequest:
      type: object
      properties:
        timestamp:
          type: string
          format: datetime
        status:
          type: string
        error:
          type: string
        path:
          type: string
